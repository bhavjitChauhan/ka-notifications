(()=>{"use strict";var n={626:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getNotificationCount=e.getNotificationData=e.createOffscreenHeartbeat=void 0;const a=t(921);e.createOffscreenHeartbeat=async function(){await(chrome.offscreen.hasDocument?.())||await chrome.offscreen.createDocument({url:chrome.runtime.getURL("heartbeat.html"),reasons:[chrome.offscreen.Reason.BLOBS],justification:"Keep service worker alive."})},e.getNotificationData=async function(n,e){const t=await(0,a.graphQLFetchJsonResponse)("getNotificationsForUser",n,void 0===e?void 0:{after:e});if(t?.cookieError)return{error:"cookie"};if(!t?.value)return;const o=t.value?.data?.user?.notifications;return o?{value:{notifications:o.notifications,cursor:o.pageInfo.nextCursor}}:{error:"nonotifications"}},e.getNotificationCount=async function(n){const e=await(0,a.graphQLFetchJsonResponse)("getFullUserProfile",n);if(!e?.value)return;const t=e.value?.data?.user;return t?{value:t.newNotificationCount}:{error:"!user",value:t}}},921:function(n,e,t){var a=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0}),e.getJsonUserProfile=e.addFeedback=e.graphQLFetchJsonResponse=e.getUserFkeyCookie=e.graphQLFetch=void 0;const o=a(t(593));async function i(n,e,t={}){return await new Promise(((a,i)=>{fetch("https://www.khanacademy.org/api/internal/graphql/"+n+"?/fastly/",{method:"POST",headers:{"X-KA-fkey":e,"Content-Type":"application/json"},body:JSON.stringify({operationName:n,query:o.default[n],variables:t}),credentials:"same-origin"}).then((async e=>{200!==e.status?i(`Error in GraphQL "${n}" call: Server responded  with status ${e.status}.`):a(e)})).catch(i)}))}async function r(){return await new Promise(((n,e)=>{chrome.cookies.get({url:"https://www.khanacademy.org",name:"fkey"},(t=>{null!==t?n(t.value):e("No fkey cookie found.")}))}))}e.graphQLFetch=i,e.getUserFkeyCookie=r,e.graphQLFetchJsonResponse=async function(n,e,t={}){let a,o;if(void 0!==e)a=e;else try{a=await r()}catch(n){return{cookieError:!0}}try{o=await i(n,a,t)}catch(n){return"Failed to fetch"===n.message?void console.log("Possible network disconnect detected, please check your internet connection."):void console.error("Error in response: ",n)}return{value:await o.json()}},e.addFeedback=async function(n,e,t,a,o){let r,s,c="scratchpad";const d=new URL("https://www.khanacademy.org/"+e).searchParams;if("ResponseFeedbackNotification"===t)s="ANSWER"===a?"QUESTION":"COMMENT",r="REPLY",c=d.get("qa_expand_type");else{if("ProgramFeedbackNotification"!==t)return!1;s=a,r="QUESTION"===a?"ANSWER":"REPLY"}const l=e.split("?")[0].split("/").pop();return await i("feedbackQuery",n,{topicId:l,feedbackType:s,currentSort:5,qaExpandKey:d.get("qa_expand_key"),focusKind:c}).then((async n=>await n.json())).then((async e=>{const t=e.data.feedback.feedback[0],s="QUESTION"===a&&"answer"===d.get("qa_expand_type")?t.answers[0].key:t.key;return await i("AddFeedbackToDiscussion",n,{parentKey:s,textContent:o,feedbackType:r,fromVideoAuthor:!1,shownLowQualityNotice:!1})})).then((n=>n.ok)).catch((n=>(console.error("Error in sending feedback: ",n),!1)))},e.getJsonUserProfile=async function(){const n=await fetch("https://www.khanacademy.org/api/internal/graphql/getFullUserProfile?hash=2921543415");return await n.json()}},593:n=>{n.exports=JSON.parse('{"AddFeedbackToDiscussion":"mutation AddFeedbackToDiscussion($focusKind: String, $focusId: String, $parentKey: String, $textContent: String!, $feedbackType: FeedbackType!, $fromVideoAuthor: Boolean, $shownLowQualityNotice: Boolean) {\\n  addFeedbackToDiscussion(focusKind: $focusKind, focusId: $focusId, parentKey: $parentKey, textContent: $textContent, feedbackType: $feedbackType, fromVideoAuthor: $fromVideoAuthor, shownLowQualityNotice: $shownLowQualityNotice) {\\n    feedback {\\n      appearsAsDeleted\\n      author {\\n        id\\n        kaid\\n        nickname\\n        avatar {\\n          name\\n          imageSrc\\n          __typename\\n        }\\n        __typename\\n      }\\n      content\\n      date\\n      definitelyNotSpam\\n      deleted\\n      downVoted\\n      expandKey\\n      feedbackType\\n      flaggedBy\\n      flags\\n      focusUrl\\n      focus {\\n        kind\\n        id\\n        translatedTitle\\n        relativeUrl\\n        __typename\\n      }\\n      fromVideoAuthor\\n      key\\n      notifyOnAnswer\\n      permalink\\n      qualityKind\\n      replyCount\\n      replyExpandKeys\\n      sumVotesIncremented\\n      upVoted\\n      __typename\\n    }\\n    lowQualityResponse {\\n      feedbackCode\\n      feedbackChar\\n      feedbackType\\n      showLowQualityNotice\\n      __typename\\n    }\\n    error {\\n      code\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n","clearBrandNewNotifications":"mutation clearBrandNewNotifications {\\n  clearBrandNewNotifications {\\n    error {\\n      code\\n      __typename\\n    }\\n    __typename\\n  }\\n}","feedbackQuery":"query feedbackQuery($topicId: String!, $focusKind: String!, $cursor: String, $limit: Int, $feedbackType: FeedbackType!, $currentSort: Int, $qaExpandKey: String) {\\n  feedback(focusId: $topicId, cursor: $cursor, limit: $limit, feedbackType: $feedbackType, focusKind: $focusKind, sort: $currentSort, qaExpandKey: $qaExpandKey, answersLimit: 1) {\\n    feedback {\\n      isLocked\\n      isPinned\\n      replyCount\\n      appearsAsDeleted\\n      author {\\n        id\\n        kaid\\n        nickname\\n        avatar {\\n          name\\n          imageSrc\\n          __typename\\n        }\\n        __typename\\n      }\\n      badges {\\n        name\\n        icons {\\n          smallUrl\\n          __typename\\n        }\\n        description\\n        __typename\\n      }\\n      content\\n      date\\n      definitelyNotSpam\\n      deleted\\n      downVoted\\n      expandKey\\n      feedbackType\\n      flaggedBy\\n      flaggedByUser\\n      flags\\n      focusUrl\\n      focus {\\n        kind\\n        id\\n        translatedTitle\\n        relativeUrl\\n        __typename\\n      }\\n      fromVideoAuthor\\n      key\\n      lowQualityScore\\n      notifyOnAnswer\\n      permalink\\n      qualityKind\\n      replyCount\\n      replyExpandKeys\\n      showLowQualityNotice\\n      sumVotesIncremented\\n      upVoted\\n      ... on QuestionFeedback {\\n        hasAnswered\\n        answers {\\n          isLocked\\n          isPinned\\n          replyCount\\n          appearsAsDeleted\\n          author {\\n            id\\n            kaid\\n            nickname\\n            avatar {\\n              name\\n              imageSrc\\n              __typename\\n            }\\n            __typename\\n          }\\n          badges {\\n            name\\n            icons {\\n              smallUrl\\n              __typename\\n            }\\n            description\\n            __typename\\n          }\\n          content\\n          date\\n          definitelyNotSpam\\n          deleted\\n          downVoted\\n          expandKey\\n          feedbackType\\n          flaggedBy\\n          flaggedByUser\\n          flags\\n          focusUrl\\n          focus {\\n            kind\\n            id\\n            translatedTitle\\n            relativeUrl\\n            __typename\\n          }\\n          fromVideoAuthor\\n          key\\n          lowQualityScore\\n          notifyOnAnswer\\n          permalink\\n          qualityKind\\n          replyCount\\n          replyExpandKeys\\n          showLowQualityNotice\\n          sumVotesIncremented\\n          upVoted\\n          __typename\\n        }\\n        isOld\\n        answerCount\\n        __typename\\n      }\\n      ... on AnswerFeedback {\\n        question {\\n          isLocked\\n          isPinned\\n          replyCount\\n          appearsAsDeleted\\n          author {\\n            id\\n            kaid\\n            nickname\\n            avatar {\\n              name\\n              imageSrc\\n              __typename\\n            }\\n            __typename\\n          }\\n          badges {\\n            name\\n            icons {\\n              smallUrl\\n              __typename\\n            }\\n            description\\n            __typename\\n          }\\n          content\\n          date\\n          definitelyNotSpam\\n          deleted\\n          downVoted\\n          expandKey\\n          feedbackType\\n          flaggedBy\\n          flaggedByUser\\n          flags\\n          focusUrl\\n          focus {\\n            kind\\n            id\\n            translatedTitle\\n            relativeUrl\\n            __typename\\n          }\\n          fromVideoAuthor\\n          key\\n          lowQualityScore\\n          notifyOnAnswer\\n          permalink\\n          qualityKind\\n          replyCount\\n          replyExpandKeys\\n          showLowQualityNotice\\n          sumVotesIncremented\\n          upVoted\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    cursor\\n    isComplete\\n    sortedByDate\\n    __typename\\n  }\\n}\\n","getFeedbackRepliesPage":"query getFeedbackRepliesPage($postKey: String!, $cursor: String, $limit: Int!) {\\n  feedbackRepliesPaginated(feedbackKey: $postKey, cursor: $cursor, limit: $limit) {\\n    cursor\\n    isComplete\\n    feedback {\\n      isLocked\\n      expandKey\\n      appearsAsDeleted\\n      author {\\n        id\\n        kaid\\n        nickname\\n        avatar {\\n          name\\n          imageSrc\\n          __typename\\n        }\\n        __typename\\n      }\\n      content\\n      date\\n      definitelyNotSpam\\n      deleted\\n      downVoted\\n      expandKey\\n      feedbackType\\n      flaggedBy\\n      flaggedByUser\\n      flags\\n      focusUrl\\n      fromVideoAuthor\\n      key\\n      lowQualityScore\\n      notifyOnAnswer\\n      permalink\\n      qualityKind\\n      replyCount\\n      replyExpandKeys\\n      showLowQualityNotice\\n      sumVotesIncremented\\n      upVoted\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n","getFullUserProfile":"query getFullUserProfile($kaid: String, $username: String) {\\n  user(kaid: $kaid, username: $username) {\\n    id\\n    kaid\\n    key\\n    userId\\n    email\\n    username\\n    profileRoot\\n    gaUserId\\n    isPhantom\\n    isDeveloper: hasPermission(name: \\"can_do_what_only_admins_can_do\\")\\n    isCurator: hasPermission(name: \\"can_curate_tags\\", scope: ANY_ON_CURRENT_LOCALE)\\n    isCreator: hasPermission(name: \\"has_creator_role\\", scope: ANY_ON_CURRENT_LOCALE)\\n    isPublisher: hasPermission(name: \\"can_publish\\", scope: ANY_ON_CURRENT_LOCALE)\\n    isModerator: hasPermission(name: \\"can_moderate_users\\", scope: GLOBAL)\\n    isParent\\n    isTeacher\\n    isFormalTeacher\\n    isDataCollectible\\n    isChild\\n    isOrphan\\n    isCoachingLoggedInUser\\n    canModifyCoaches\\n    nickname\\n    hideVisual\\n    joined\\n    points\\n    countVideosCompleted\\n    bio\\n    profile {\\n      accessLevel\\n      __typename\\n    }\\n    soundOn\\n    muteVideos\\n    showCaptions\\n    prefersReducedMotion\\n    noColorInVideos\\n    newNotificationCount\\n    canHellban: hasPermission(name: \\"can_ban_users\\", scope: GLOBAL)\\n    canMessageUsers: hasPermission(\\n      name: \\"can_send_moderator_messages\\"\\n      scope: GLOBAL\\n    )\\n    isSelf: isActor\\n    hasStudents: hasCoachees\\n    hasClasses\\n    hasChildren\\n    hasCoach\\n    badgeCounts\\n    homepageUrl\\n    isMidsignupPhantom\\n    includesDistrictOwnedData\\n    includesKmapDistrictOwnedData\\n    includesK4dDistrictOwnedData\\n    canAccessDistrictsHomepage\\n    preferredKaLocale {\\n      id\\n      kaLocale\\n      status\\n      __typename\\n    }\\n    underAgeGate {\\n      parentEmail\\n      daysUntilCutoff\\n      approvalGivenAt\\n      __typename\\n    }\\n    authEmails\\n    signupDataIfUnverified {\\n      email\\n      emailBounced\\n      __typename\\n    }\\n    pendingEmailVerifications {\\n      email\\n      __typename\\n    }\\n    hasAccessToAIGuideTeacher\\n    tosAccepted\\n    shouldShowAgeCheck\\n    birthMonthYear\\n    lastLoginCountry\\n    __typename\\n  }\\n  actorIsImpersonatingUser\\n  isAIGuideEnabled\\n  hasAccessToAIGuideDev\\n}","getNotificationsForUser":"query getNotificationsForUser($after: ID) {\\n  user {\\n    id\\n    notifications(after: $after) {\\n      notifications {\\n        __typename\\n        brandNew\\n        class_\\n        date\\n        kaid\\n        read\\n        url\\n        urlsafeKey\\n        ...ThreadCreatedNotificationType\\n        ...AssignmentDueDateNotificationType\\n        ...AssignmentCreatedNotificationType\\n        ...CoachRequestNotificationType\\n        ...BadgeNotificationType\\n        ...CourseMasteryGoalCreatedNotificationType\\n        ...ModeratorNotificationType\\n        ...ProgramFeedbackNotificationType\\n        ...CoachRequestAcceptedNotificationType\\n        ...AvatarNotificationType\\n        ...InfoNotificationType\\n        ...ResponseFeedbackNotificationType\\n        ...GroupedBadgeNotificationType\\n        ...UnitMasteryGoalCreatedNotificationType\\n        ...UnitMasteryDueDateCreatedNotificationType\\n        ...CourseMasteryDueDateCreatedNotificationType\\n        ...MasteryGoalDueDateApproachingCreatedNotificationType\\n      }\\n      pageInfo {\\n        nextCursor\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\\nfragment AssignmentCreatedNotificationType on AssignmentCreatedNotification {\\n  numAssignments\\n  contentTitle\\n  curationNodeIconURL\\n  className\\n  __typename\\n}\\n\\nfragment AssignmentDueDateNotificationType on AssignmentDueDateNotification {\\n  numAssignments\\n  dueDate\\n  contentTitle\\n  curationNodeIconURL\\n  __typename\\n}\\n\\nfragment AvatarNotificationType on AvatarNotification {\\n  name\\n  thumbnailSrc\\n  __typename\\n}\\n\\nfragment BadgeNotificationType on BadgeNotification {\\n  badgeName\\n  badge {\\n    description\\n    fullDescription\\n    name\\n    relativeUrl\\n    icons {\\n      compactUrl\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment CoachRequestAcceptedNotificationType on CoachRequestAcceptedNotification {\\n  isMultipleClassrooms\\n  student {\\n    id\\n    email\\n    nickname\\n    __typename\\n  }\\n  classroom {\\n    cacheId\\n    id\\n    name\\n    topics {\\n      id\\n      slug\\n      iconUrl\\n      key\\n      translatedStandaloneTitle\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment CoachRequestNotificationType on CoachRequestNotification {\\n  coachIsParent\\n  coach {\\n    id\\n    kaid\\n    nickname\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment CourseMasteryDueDateCreatedNotificationType on CourseMasteryDueDateCreatedNotification {\\n  dueDate\\n  course {\\n    id\\n    iconUrl\\n    translatedStandaloneTitle\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment CourseMasteryGoalCreatedNotificationType on CourseMasteryGoalCreatedNotification {\\n  curationNodeIconURL\\n  curationNodeTranslatedTitle\\n  masteryPercentage\\n  __typename\\n}\\n\\nfragment GroupedBadgeNotificationType on GroupedBadgeNotification {\\n  badgeNotifications {\\n    badge {\\n      badgeCategory\\n      description\\n      fullDescription\\n      name\\n      icons {\\n        compactUrl\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment InfoNotificationType on InfoNotification {\\n  notificationType\\n  __typename\\n}\\n\\nfragment MasteryGoalDueDateApproachingCreatedNotificationType on MasteryGoalDueDateApproachingCreatedNotification {\\n  classroomInfo: classroom {\\n    id\\n    cacheId\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ModeratorNotificationType on ModeratorNotification {\\n  text\\n  __typename\\n}\\n\\nfragment ProgramFeedbackNotificationType on ProgramFeedbackNotification {\\n  authorAvatarSrc\\n  authorNickname\\n  feedbackType\\n  translatedScratchpadTitle\\n  content\\n  __typename\\n}\\n\\nfragment ResponseFeedbackNotificationType on ResponseFeedbackNotification {\\n  authorAvatarUrl\\n  authorNickname\\n  feedbackType\\n  focusTranslatedTitle\\n  content\\n  sumVotesIncremented\\n  __typename\\n}\\n\\nfragment ThreadCreatedNotificationType on ThreadCreatedNotification {\\n  coachee {\\n    id\\n    kaid\\n    nickname\\n    __typename\\n  }\\n  threadId\\n  flagged\\n  __typename\\n}\\n\\nfragment UnitMasteryDueDateCreatedNotificationType on UnitMasteryDueDateCreatedNotification {\\n  dueDate\\n  unit {\\n    id\\n    iconUrl\\n    translatedStandaloneTitle\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment UnitMasteryGoalCreatedNotificationType on UnitMasteryGoalCreatedNotification {\\n  numAssignmentsCount: numAssignments\\n  classroomInfo: classroom {\\n    cacheId\\n    id\\n    coach {\\n      id\\n      nickname\\n      __typename\\n    }\\n    __typename\\n  }\\n  unit {\\n    id\\n    iconUrl\\n    parent {\\n      id\\n      iconUrl\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n"}')}},e={};function t(a){var o=e[a];if(void 0!==o)return o.exports;var i=e[a]={exports:{}};return n[a].call(i.exports,i,i.exports,t),i.exports}(()=>{const n=t(626),e=t(921),a="khanAcademyNotifications";async function o(){const t=performance.now();let a;try{a=await(0,e.getUserFkeyCookie)()}catch(n){return chrome.action.setBadgeText({text:""}),void chrome.storage.local.set({cached_data:"info:logout",cached_cursor:""})}const o=await(0,n.getNotificationCount)(a);if(!o)return;if(0===o.value&&chrome.action.setBadgeText({text:""}),"!user"===o.error)return void console.log("No user found: ",o.value);const i=await(0,n.getNotificationData)(a);i&&("nonotifications"===i.error&&(chrome.action.setBadgeText({text:""}),chrome.storage.local.remove("prefetchCursor"),chrome.storage.local.set({prefetchData:"info:nonotifications"})),void 0===i.error&&(console.log(`Notifications (${(performance.now()-t).toFixed(3)}ms): `,i.value.notifications),chrome.storage.local.set({prefetchData:i.value.notifications,prefetchCursor:i.value.cursor}),0!==o.value&&chrome.action.setBadgeText({text:o.value>98?"99+":o.value.toString()})))}chrome.runtime.onInstalled.addListener(n.createOffscreenHeartbeat),chrome.runtime.onMessage.addListener((n=>{n.keepAlive})),chrome.cookies.onChanged.addListener((async({cookie:{name:n},removed:e})=>{"KAAS"===n&&(chrome.action.setBadgeText({text:""}),e?(console.log("Logged out!"),chrome.storage.local.remove(["prefetchCursor"]),chrome.storage.local.set({prefetchData:"info:logout"})):(console.log("Logged in!"),chrome.storage.local.remove(["prefetchCursor","prefetchData"]),o()))})),chrome.alarms.onAlarm.addListener((async({name:n})=>{n===a&&o()})),chrome.storage.local.remove(["prefetchCursor","prefetchData","commentSort"]),chrome.action.setBadgeBackgroundColor({color:"#00BFA5"}),chrome.alarms.clear(a),chrome.alarms.create(a,{periodInMinutes:1}),o()})()})();